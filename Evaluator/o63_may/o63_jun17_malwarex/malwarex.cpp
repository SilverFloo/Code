#include "malwarex.h"
#include<bits/stdc++.h>
using namespace std;
void alice(int N, int M, std::vector<int> L){ 
    vector<string> S;
    std::string s = "";
    bool check[N+M];
    int cnt=0;
    for(int i=0;i<=N;i++){
        for(int j=0;j<L[i];j++){
            check[cnt++]=0;
        }
        if(i<N)check[cnt++]=1;
    }
    for(int i=0;i<N+M;i++){
      //  printf("%d",check[i]);
    }//cout<<endl;
    int x = 0;
    for(int i=0;(1<<i)<N;i++){
        x=1;
        for(int j=0;j<N;j++){
            if(j%(1<<i)==0)x^=1;
            s+=x+'0';
        }
        S.push_back(sendMessage(s));
      //  cout<<s<<" = "<<S[S.size()-1]<<endl;
        s.clear();
    }
    x=0;
    for(int i=0;(1<<i)<N;i++)x++;
    vector<int> pos[N];
    int rpos[N];
    for(int i=0;i<N;i++)rpos[i]=-1;
    for(int i=0;i<N+M;i++){
        int l = 0,r = N-1;
        int cnt=x-1;
        
        while(cnt>=0){
            l*=2;
            l+=S[cnt][i]-'0';
            cnt--;
        }
        if(l>=N)continue;
        pos[l].push_back(i);
    }
    queue<int> use;
    queue<int> use2;
    vector<pair<int,int>> send;
    for(int i=0;i<N;i++){
        if(pos[i].size()==1)rpos[i]=pos[i][0],use.push(i);
        if(pos[i].size()>1)send.emplace_back(pos[i].size(),i);

      //  printf("\n%d -> ",i);
      //  for(auto x:pos[i])cout<<x<<' ';
       //cout<<endl;


    }

    int time=0;
    sort(send.begin(),send.end());
    for(int i=0;i<N;i++)s+='0';

    for(int i=0;i<send.size();i++){
        int u = send[i].second;
        int tmp = 0;
        for(int j=0;j<pos[u].size()-1;j++){
            //printf("<%d - %d(%d)>",use.front(),j,check[pos[u][j]]);
            s[use.front()] = check[pos[u][j]]+'0';
            use.pop();
            if(check[pos[u][j]])break;
            tmp++;
        }
        rpos[u]=pos[u][tmp];
        use.push(u);
    }
    
    //for(int i=0;i<N;i++)printf("%d. ",rpos[i]);
  // cout<<s<<endl;
   
    sendMessage(s);

    return;
}

std::vector<int> bob(int N, int M, int Q, std::vector<std::string> S){
    // your code here
    vector<int> pos[N];
    int rpos[N];
    std::vector<int> res(N+1);
    for(int i=0;i<N;i++)rpos[i]=-1;
    
    int x=0;
    for(int i=0;(1<<i)<N;i++)x++;
    for(int i=0;i<N+M;i++){
        int l = 0,r = N-1;
        int cnt=x-1;
        
        while(cnt>=0){
            l*=2;
            l+=S[cnt][i]-'0';
            cnt--;
        }
        if(l>=N)continue;
        pos[l].push_back(i);
    }
    int cnt = x;
    queue<int> use;
    queue<int> use2;
    vector<pair<int,int>> send;
    for(int i=0;i<N;i++){
        if(pos[i].size()==1)rpos[i]=pos[i][0],use.push(i);
        if(pos[i].size()>1)send.emplace_back(pos[i].size(),i);
    }

    int time=0;
    sort(send.begin(),send.end());
    for(int i=0;i<send.size();i++){
        int u = send[i].second;
        int tmp = 0;
        for(int j=0;j<pos[u].size()-1;j++){
            
          //  printf("<%d - %d(%c)>",use.front(),j,S[cnt][rpos[use.front()]]);
            if(S[cnt][rpos[use.front()]]=='1'){
                use.pop();
                break;
            }
            use.pop();
            tmp++;
        }
        rpos[u]=pos[u][tmp];
        use.push(u);
    }
    
 //   printf("here");
  //  for(int i=0;i<N;i++)printf("%d ",rpos[i]);
    sort(rpos,rpos+N);
    res[0] = rpos[0];
    for(int i=1;i<N;i++)res[i]=rpos[i]-rpos[i-1]-1;
    res[N] = N+M-rpos[N-1]-1;
  // cout<<endl;
    //for(int i=0;i<N+1;i++)printf("%d ",res[i]);
    return res;

}
