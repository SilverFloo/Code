#include "malwarex.h"
#include<bits/stdc++.h>
using namespace std;
void alice(int N, int M, std::vector<int> L){ 
    vector<string> S;
    std::string s = "";
    bool check[N+M];
    int cnt=0;
    for(int i=0;i<=N;i++){
        for(int j=0;j<L[i];j++){
            check[cnt++]=0;
        }
        if(i<N)check[cnt++]=1;
    }
    for(int i=0;i<N+M;i++){
      //  printf("%d",check[i]);
    }//cout<<endl;
    int x = 0;
    for(int i=0;(1<<i)<N;i++){
        x=1;
        for(int j=0;j<N;j++){
            if(j%(1<<i)==0)x^=1;
            s+=x+'0';
        }
        S.push_back(sendMessage(s));
      //  cout<<s<<" = "<<S[S.size()-1]<<endl;
        s.clear();
    }
    x=0;
    for(int i=0;(1<<i)<N;i++)x++;
    vector<int> pos[N];
    int rpos[N];
    for(int i=0;i<N;i++)rpos[i]=-1;
    for(int i=0;i<N+M;i++){
        int l = 0,r = N-1;
        int cnt=x-1;
        
        while(cnt>=0){
            l*=2;
            l+=S[cnt][i]-'0';
            cnt--;
        }
        if(l>=N)continue;
        pos[l].push_back(i);
    }
    queue<int> use;
    queue<int> use2;
    vector<pair<int,int>> send;
    for(int i=0;i<N;i++){
        if(pos[i].size()==1)rpos[i]=pos[i][0],use.push(i);
        if(pos[i].size()>1)send.emplace_back(pos[i].size(),i);

     //    printf("\n%d -> ",i);
       // for(auto x:pos[i])cout<<x<<' ';
       // cout<<endl;


    }

    int time=0;
    sort(send.begin(),send.end());
    for(int i=0;i<N;i++)s+='0';

    for(int i=0;i<send.size();i++){
        
        int u =send[i].second;
        
        if(send[i].first==2){
            if(time==0){
                    s[use.front()] = check[pos[u][0]]+'0';
                    use2.push(use.front());
                    use.pop();
                    use.push(u);
    
                }
        }
        else{
            for(int j=0;j<pos[u].size();j++){
                    
                if(time==0){
                    
   //printf("<%d - %d>",use.front(),pos[u][j]);
                    s[use.front()] = check[pos[u][j]]+'0';
                    use2.push(use.front());
                    use.pop();
                    if(use.empty()&&!check[pos[u][j]]){
                        //cout<<s<<endl;
                        sendMessage(s);
                        for(int i=0;i<N;i++)s[i]='0';
                        time=1;
                    }
                }
                else{
   //printf("<%d - %d>",use2.front(),pos[u][j]);
                    s[use2.front()]= check[pos[u][j]]+'0';
                    use2.pop();
                }
                if(check[pos[u][j]]){//printf("...here");
                    if(time==0)use.push(u);
                    else use2.push(u);
                    break;
                }
            }
        }

    }
   // cout<<s<<endl;
    sendMessage(s);

    return;
}

std::vector<int> bob(int N, int M, int Q, std::vector<std::string> S){
    // your code here
    vector<int> pos[N];
    int rpos[N];
    std::vector<int> res(N+1);
    for(int i=0;i<N;i++)rpos[i]=-1;
    
    int x=0;
    for(int i=0;(1<<i)<N;i++)x++;
    for(int i=0;i<N+M;i++){
        int l = 0,r = N-1;
        int cnt=x-1;
        
        while(cnt>=0){
            l*=2;
            l+=S[cnt][i]-'0';
            cnt--;
        }
        if(l>=N)continue;
        pos[l].push_back(i);
    }
    int cnt = x;
    queue<int> use;
    queue<int> use2;
    vector<pair<int,int>> send;
    for(int i=0;i<N;i++){
        if(pos[i].size()==1)rpos[i]=pos[i][0],use.push(i);
        if(pos[i].size()>1)send.emplace_back(pos[i].size(),i);
    }

    int time=0;
    sort(send.begin(),send.end());
    for(int i=0;i<send.size();i++){
        int u =send[i].second;
        if(send[i].first==2){
                    if(S[cnt][rpos[use.front()]]=='1')rpos[u]=pos[u][0];
                    else rpos[u]=pos[u][1];
                    
                    use2.push(use.front());
                    use.pop();
                    use.push(u);
        }
        else{
            for(int j=0;j<pos[u].size();j++){
                //printf("/%d>",u);
                if(time==0){
  // printf("<%d - %d>",use.front(),pos[u][j]);
                    if(S[cnt][rpos[use.front()]]=='1'){
                        rpos[u]=pos[u][j];
                        use2.push(use.front());
                        use.pop();
                        use.push(u); 
                        break;
                    }
                    else{
                        use2.push(use.front());
                        use.pop();
                        
                    }
                }
                else{
                     
 //  printf("<%d - %d>",use2.front(),pos[u][j]);
                    if(S[cnt][rpos[use2.front()]]=='1'){
                      
                        rpos[u]=pos[u][j];
                        use2.pop();
                        use2.push(u); 
                        break;
                    }
                    else{
                        use2.pop();
                    }
                }
                
                    if(use.empty()&&time==0){
                        time=1;
                        cnt++;
                    }
                
                
            }
        }

    }
 //   printf("here");
   // for(int i=0;i<N;i++)printf("%d ",rpos[i]);
    sort(rpos,rpos+N);
    res[0] = rpos[0];
    for(int i=1;i<N;i++)res[i]=rpos[i]-rpos[i-1]-1;
    res[N] = N+M-rpos[N-1]-1;
   // cout<<endl;
    //for(int i=0;i<N+1;i++)printf("%d ",res[i]);
    return res;

}
